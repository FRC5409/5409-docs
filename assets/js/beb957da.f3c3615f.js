"use strict";(self.webpackChunk_5409=self.webpackChunk_5409||[]).push([[978],{821:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>E,contentTitle:()=>S,default:()=>M,frontMatter:()=>V,metadata:()=>r,toc:()=>N});const r=JSON.parse('{"id":"Git/git1","title":"Merge Conflicts","description":"When multiple people are collaborating in a repository, it is not uncommon for merge conflicts to occure. This can happen when two different users try to push changes to the same piece of code as Git gets confused as to which of the two it should keep! This can be manually resolved by telling Git what it should keep as shown in the example below.","source":"@site/docs/Git/Merge.md","sourceDirName":"Git","slug":"/Git/git1","permalink":"/5409-docs/docs/Git/git1","draft":false,"unlisted":false,"editUrl":"https://github.com/frc5409/5409-docs/tree/main/docs/Git/Merge.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"git1","title":"Merge Conflicts","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"How to Effectively Use Simulation","permalink":"/5409-docs/docs/Simulation/EffectiveUsage"},"next":{"title":"Branches","permalink":"/5409-docs/docs/Git/git2"}}');var o=n(4848),s=n(8453),i=n(6540),a=n(4164),l=n(7559),c=n(3104),u=n(6347),d=n(205),h=n(7485),p=n(1682),f=n(679);function m(e){return i.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function g(e){const{values:t,children:n}=e;return(0,i.useMemo)((()=>{const e=t??function(e){return m(e).map((({props:{value:e,label:t,attributes:n,default:r}})=>({value:e,label:t,attributes:n,default:r})))}(n);return function(e){const t=(0,p.XI)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function b({value:e,tabValues:t}){return t.some((t=>t.value===e))}function v({queryString:e=!1,groupId:t}){const n=(0,u.W6)(),r=function({queryString:e=!1,groupId:t}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:e,groupId:t});return[(0,h.aZ)(r),(0,i.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(n.location.search);t.set(r,e),n.replace({...n.location,search:t.toString()})}),[r,n])]}function y(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,o=g(e),[s,a]=(0,i.useState)((()=>function({defaultValue:e,tabValues:t}){if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!b({value:e,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const n=t.find((e=>e.default))??t[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:o}))),[l,c]=v({queryString:n,groupId:r}),[u,h]=function({groupId:e}){const t=function(e){return e?`docusaurus.tab.${e}`:null}(e),[n,r]=(0,f.Dv)(t);return[n,(0,i.useCallback)((e=>{t&&r.set(e)}),[t,r])]}({groupId:r}),p=(()=>{const e=l??u;return b({value:e,tabValues:o})?e:null})();(0,d.A)((()=>{p&&a(p)}),[p]);return{selectedValue:s,selectValue:(0,i.useCallback)((e=>{if(!b({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);a(e),c(e),h(e)}),[c,h,o]),tabValues:o}}var x=n(2303);const w={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function j({className:e,block:t,selectedValue:n,selectValue:r,tabValues:s}){const i=[],{blockElementScrollPositionUntilNextRender:l}=(0,c.a_)(),u=e=>{const t=e.currentTarget,o=i.indexOf(t),a=s[o].value;a!==n&&(l(t),r(a))},d=e=>{let t=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const n=i.indexOf(e.currentTarget)+1;t=i[n]??i[0];break}case"ArrowLeft":{const n=i.indexOf(e.currentTarget)-1;t=i[n]??i[i.length-1];break}}t?.focus()};return(0,o.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":t},e),children:s.map((({value:e,label:t,attributes:r})=>(0,o.jsx)("li",{role:"tab",tabIndex:n===e?0:-1,"aria-selected":n===e,ref:e=>{i.push(e)},onKeyDown:d,onClick:u,...r,className:(0,a.A)("tabs__item",w.tabItem,r?.className,{"tabs__item--active":n===e}),children:t??e},e)))})}function C({lazy:e,children:t,selectedValue:n}){const r=(Array.isArray(t)?t:[t]).filter(Boolean);if(e){const e=r.find((e=>e.props.value===n));return e?(0,i.cloneElement)(e,{className:(0,a.A)("margin-top--md",e.props.className)}):null}return(0,o.jsx)("div",{className:"margin-top--md",children:r.map(((e,t)=>(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==n})))})}function k(e){const t=y(e);return(0,o.jsxs)("div",{className:(0,a.A)(l.G.tabs.container,"tabs-container",w.tabList),children:[(0,o.jsx)(j,{...t,...e}),(0,o.jsx)(C,{...t,...e})]})}function T(e){const t=(0,x.A)();return(0,o.jsx)(k,{...e,children:m(e.children)},String(t))}const A={tabItem:"tabItem_Ymn6"};function I({children:e,hidden:t,className:n}){return(0,o.jsx)("div",{role:"tabpanel",className:(0,a.A)(A.tabItem,n),hidden:t,children:e})}const V={id:"git1",title:"Merge Conflicts",sidebar_position:1},S=void 0,E={},N=[{value:"Resolving Merge Conflicts",id:"resolving-merge-conflicts",level:2},{value:"Group Activity",id:"group-activity",level:2},{value:"Clone repository",id:"clone-repository",level:3},{value:"Create a commit",id:"create-a-commit",level:3}];function G(e){const t={a:"a",admonition:"admonition",h2:"h2",h3:"h3",img:"img",p:"p",strong:"strong",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:["When multiple people are collaborating in a repository, it is not uncommon for ",(0,o.jsx)(t.strong,{children:"merge conflicts"})," to occure. This can happen when two different users try to push changes to the same piece of code as Git gets confused as to which of the two it should keep! This can be manually resolved by telling Git what it should keep as shown in the example below."]}),"\n",(0,o.jsx)(t.admonition,{type:"info",children:(0,o.jsxs)(t.p,{children:["As a general rule of thumb, in order to mitigate merge conflcits, you should always ",(0,o.jsx)(t.strong,{children:"git pull"})," before beginning to make changes."]})}),"\n",(0,o.jsx)(t.h2,{id:"resolving-merge-conflicts",children:"Resolving Merge Conflicts"}),"\n",(0,o.jsxs)(t.p,{children:["When merge conflicts occur, you will be presented with the following popup. Select ",(0,o.jsx)(t.strong,{children:(0,o.jsx)("span",{style:{color:"#62bea9"},children:"Open in Visual Studio Code"})})," to resolve the conflict."]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"Resolve Merge Confict Diagram",src:n(3423).A+"",width:"478",height:"269"})}),"\n",(0,o.jsxs)(t.p,{children:["You should see two different highlighted sections for each conflict. The green portion represents the ",(0,o.jsx)(t.strong,{children:(0,o.jsx)("span",{style:{color:"#62bea9"},children:"current changes"})})," you want to push while the blue portion represents the ",(0,o.jsx)(t.strong,{children:(0,o.jsx)("span",{style:{color:"#2596be"},children:"incoming changes"})})," from the remote. You are given the option to choose between the two or both depending on what fits best for the given conflict. Additionally, you can also make manual changes to the code if required."]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"Merge Conflict Example",src:n(2134).A+"",width:"700",height:"169"})}),"\n",(0,o.jsx)(t.h2,{id:"group-activity",children:"Group Activity"}),"\n",(0,o.jsxs)(T,{children:[(0,o.jsxs)(I,{value:"setep1",label:"1. Create a commit",default:!0,children:[(0,o.jsx)(t.h3,{id:"clone-repository",children:"Clone repository"}),(0,o.jsxs)(t.p,{children:["In order to participate in this activity, you must first clone the following ",(0,o.jsx)(t.a,{href:"https://github.com/FRC5409",children:"repository"}),"."]}),(0,o.jsx)(t.h3,{id:"create-a-commit",children:"Create a commit"}),(0,o.jsxs)(t.p,{children:["Make any changes you'd like to the code provided and create a commit. ",(0,o.jsx)(t.strong,{children:"DO NOT PUSH YET!"})]})]}),(0,o.jsx)(I,{value:"setep2",label:"2. Conflict mayham",default:!0,children:(0,o.jsx)(t.p,{children:"Try pushing your code at the same time as everyone else. Changes are, you're going to experience a merge conflict. Try resolving the conflicts as shown above and push your changes!"})})]})]})}function M(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(G,{...e})}):G(e)}},2134:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/merge-conflict-example-166332de959e0bfd8901d43ca9d713d5.png"},3423:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/solve-conflict-diagram-158e63cd3544f888db91f0c21208cd52.svg"},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var r=n(6540);const o={},s=r.createContext(o);function i(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);